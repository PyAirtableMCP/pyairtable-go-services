server {
    listen 80;
    server_name localhost;

    location / {
        add_header Content-Type application/json;
        
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-API-Key';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }

        if ($request_method = 'POST') {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-API-Key' always;
        }

        if ($request_method = 'GET') {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-API-Key' always;
        }

        # Health check
        location = /health {
            return 200 '{"status": "healthy", "service": "mcp-server-mock"}';
        }

        # MCP protocol endpoints
        location = /list_tools {
            return 200 '{"tools": [{"name": "test_tool", "description": "Test tool for integration testing"}]}';
        }

        location = /call_tool {
            return 200 '{"content": [{"type": "text", "text": "Test tool execution successful"}]}';
        }

        location = /list_prompts {
            return 200 '{"prompts": [{"name": "test_prompt", "description": "Test prompt for integration testing"}]}';
        }

        location = /get_prompt {
            return 200 '{"messages": [{"role": "user", "content": {"type": "text", "text": "Test prompt content"}}]}';
        }

        # Default response
        try_files $uri $uri/ /default.json;
    }
}