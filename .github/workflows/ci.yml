name: Go Services CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  GO_VERSION: "1.21"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.changes.outputs.services }}
      api-gateway: ${{ steps.changes.outputs.api-gateway }}
      auth-service: ${{ steps.changes.outputs.auth-service }}
      user-service: ${{ steps.changes.outputs.user-service }}
      permission-service: ${{ steps.changes.outputs.permission-service }}
      notification-service: ${{ steps.changes.outputs.notification-service }}
      file-service: ${{ steps.changes.outputs.file-service }}
      file-processing-service: ${{ steps.changes.outputs.file-processing-service }}
      webhook-service: ${{ steps.changes.outputs.webhook-service }}
      mobile-bff: ${{ steps.changes.outputs.mobile-bff }}
      web-bff: ${{ steps.changes.outputs.web-bff }}
      shared: ${{ steps.changes.outputs.shared }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            services:
              - '**/*.go'
              - '**/go.mod'
              - '**/go.sum'
              - 'Makefile*'
            api-gateway:
              - 'api-gateway/**'
            auth-service:
              - 'auth-service/**'
            user-service:
              - 'user-service/**'
            permission-service:
              - 'permission-service/**'
            notification-service:
              - 'notification-service/**'
            file-service:
              - 'file-service/**'
            file-processing-service:
              - 'file-processing-service/**'
            webhook-service:
              - 'webhook-service/**'
            mobile-bff:
              - 'mobile-bff/**'
            web-bff:
              - 'web-bff/**'
            shared:
              - 'shared/**'
              - 'pkg/**'
              - 'domain/**'

  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.services == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Install golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=10m
      
      - name: Check Go format
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted properly:"
            gofmt -s -l .
            exit 1
          fi
      
      - name: Go vet
        run: go vet ./...
      
      - name: Go mod verify
        run: go mod verify

  test-service:
    name: Test Service
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.services == 'true'
    strategy:
      matrix:
        service:
          - api-gateway
          - auth-service
          - user-service
          - permission-service
          - notification-service
          - file-service
          - file-processing-service
          - webhook-service
          - mobile-bff
          - web-bff
      fail-fast: false
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Check if service exists
        id: check-service
        run: |
          if [ -d "${{ matrix.service }}" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Install dependencies
        if: steps.check-service.outputs.exists == 'true'
        run: |
          cd ${{ matrix.service }}
          go mod download
          go mod verify
      
      - name: Run unit tests
        if: steps.check-service.outputs.exists == 'true'
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret-key-for-testing-purposes-only
          API_KEY: test-api-key
          ENVIRONMENT: test
        run: |
          cd ${{ matrix.service }}
          go test -v -race -coverprofile=coverage.out ./...
      
      - name: Generate coverage report
        if: steps.check-service.outputs.exists == 'true'
        run: |
          cd ${{ matrix.service }}
          go tool cover -func=coverage.out
      
      - name: Upload coverage
        if: steps.check-service.outputs.exists == 'true'
        uses: codecov/codecov-action@v3
        with:
          file: ${{ matrix.service }}/coverage.out
          flags: ${{ matrix.service }}
          name: ${{ matrix.service }}-coverage

  build-service:
    name: Build Service
    runs-on: ubuntu-latest
    needs: [lint-and-format, test-service]
    if: needs.detect-changes.outputs.services == 'true'
    strategy:
      matrix:
        service:
          - api-gateway
          - auth-service
          - user-service
          - permission-service
          - notification-service
          - file-service
          - file-processing-service
          - webhook-service
          - mobile-bff
          - web-bff
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Check if service exists
        id: check-service
        run: |
          if [ -d "${{ matrix.service }}" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Build service
        if: steps.check-service.outputs.exists == 'true'
        run: |
          cd ${{ matrix.service }}
          if [ -f "cmd/${{ matrix.service }}/main.go" ]; then
            go build -v -o bin/${{ matrix.service }} cmd/${{ matrix.service }}/main.go
          elif [ -f "main.go" ]; then
            go build -v -o bin/${{ matrix.service }} main.go
          else
            echo "No main.go found for ${{ matrix.service }}"
          fi

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-service]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: integration_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Install dependencies
        run: |
          go mod download
          go mod verify
      
      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/integration_test_db
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret-key-for-integration-testing
          API_KEY: test-api-key
          ENVIRONMENT: test
        run: |
          if [ -d "tests/integration" ]; then
            go test -v -race -tags=integration ./tests/integration/...
          else
            echo "No integration tests found"
          fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.services == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Install gosec
        run: go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
      
      - name: Run gosec security scan
        run: |
          gosec -fmt json -out gosec-report.json ./... || true
      
      - name: Run go mod vulnerability check
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./... || true
      
      - name: Upload security report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: gosec-report.json

  build-status:
    name: Build Status Check  
    runs-on: ubuntu-latest
    needs: [lint-and-format, test-service, build-service, integration-tests, security-scan]
    if: always()
    steps:
      - name: Check overall status
        run: |
          if [[ "${{ needs.lint-and-format.result }}" == "failure" || \
                "${{ needs.test-service.result }}" == "failure" || \
                "${{ needs.build-service.result }}" == "failure" ]]; then
            echo "Critical tests failed"
            exit 1
          fi
          echo "All critical tests passed"